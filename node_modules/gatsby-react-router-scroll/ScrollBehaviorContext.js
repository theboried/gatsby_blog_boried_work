"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _scrollBehavior = _interopRequireDefault(require("scroll-behavior"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _StateStorage = _interopRequireDefault(require("./StateStorage"));

var propTypes = {
  shouldUpdateScroll: _propTypes.default.func,
  children: _propTypes.default.element.isRequired,
  location: _propTypes.default.object.isRequired,
  history: _propTypes.default.object.isRequired
};
var childContextTypes = {
  scrollBehavior: _propTypes.default.object.isRequired
};

var ScrollContext =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(ScrollContext, _React$Component);

  function ScrollContext(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "shouldUpdateScroll", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(prevRouterProps, routerProps) {
        var shouldUpdateScroll = _this.props.shouldUpdateScroll;

        if (!shouldUpdateScroll) {
          return true;
        } // Hack to allow accessing scrollBehavior._stateStorage.


        return shouldUpdateScroll.call(_this.scrollBehavior, prevRouterProps, routerProps);
      }
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "registerElement", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(key, element, shouldUpdateScroll) {
        _this.scrollBehavior.registerElement(key, element, shouldUpdateScroll, _this.getRouterProps());
      }
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "unregisterElement", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(key) {
        _this.scrollBehavior.unregisterElement(key);
      }
    });
    var history = props.history;
    _this.scrollBehavior = new _scrollBehavior.default({
      addTransitionHook: history.listen,
      stateStorage: new _StateStorage.default(),
      getCurrentLocation: function getCurrentLocation() {
        return _this.props.location;
      },
      shouldUpdateScroll: _this.shouldUpdateScroll
    });

    _this.scrollBehavior.updateScroll(null, _this.getRouterProps());

    return _this;
  }

  var _proto = ScrollContext.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      scrollBehavior: this
    };
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _props = this.props,
        location = _props.location,
        history = _props.history;
    var prevLocation = prevProps.location;

    if (location === prevLocation) {
      return;
    }

    var prevRouterProps = {
      history: prevProps.history,
      location: prevProps.location // The "scroll-behavior" package expects the "action" to be on the location
      // object so let's copy it over.

    };
    location.action = history.action;
    this.scrollBehavior.updateScroll(prevRouterProps, {
      history: history,
      location: location
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.scrollBehavior.stop();
  };

  _proto.getRouterProps = function getRouterProps() {
    var _props2 = this.props,
        history = _props2.history,
        location = _props2.location;
    return {
      history: history,
      location: location
    };
  };

  _proto.render = function render() {
    return _react.default.Children.only(this.props.children);
  };

  return ScrollContext;
}(_react.default.Component);

ScrollContext.propTypes = propTypes;
ScrollContext.childContextTypes = childContextTypes;

var _default = (0, _reactRouterDom.withRouter)(ScrollContext);

exports.default = _default;