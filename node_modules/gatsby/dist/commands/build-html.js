var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");

const webpack = require(`webpack`);

const fs = require(`fs`);

const debug = require(`debug`)(`gatsby:html`);

const webpackConfig = require(`../utils/webpack.config`);

const _require = require(`../redux`),
      store = _require.store;

const _require2 = require(`gatsby-cli/lib/reporter/errors`),
      createErrorFromString = _require2.createErrorFromString;

module.exports =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (program) {
    const directory = program.directory;
    debug(`generating static HTML`); // Reduce pages objects to an array of paths.

    const pages = store.getState().pages.map(page => page.path); // Static site generation.

    const compilerConfig = yield webpackConfig(program, directory, `build-html`, null, pages);
    return new Promise((resolve, reject) => {
      webpack(compilerConfig).run((e, stats) => {
        if (e) {
          return reject(e);
        }

        const outputFile = `${directory}/public/main.render-page.js`;

        if (stats.hasErrors()) {
          let webpackErrors = stats.toJson().errors.filter(Boolean);
          return reject(webpackErrors.length ? createErrorFromString(webpackErrors[0], `${outputFile}.map`) : new Error(`There was an issue while building the site: ` + `\n\n${stats.toString()}`));
        } // Remove the temp JS bundle file built for the static-site-generator-plugin


        try {
          fs.unlinkSync(outputFile);
          fs.unlinkSync(`${outputFile}.map`);
        } catch (e) {// This function will fail on Windows with no further consequences.
        }

        return resolve(null, stats);
      });
    });
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=build-html.js.map