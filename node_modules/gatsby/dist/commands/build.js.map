{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildCSS","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirectory","reportFailure","msg","err","log","panic","module","exports","program","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","info","process","uptime","build"],"mappings":";;AAEA,MAAMA,SAASC,QAAS,yBAAT,CAAf;;AACA,MAAMC,WAAWD,QAAS,aAAT,CAAjB;;AACA,MAAME,YAAYF,QAAS,cAAT,CAAlB;;AACA,MAAMG,wBAAwBH,QAAS,oBAAT,CAA9B;;AACA,MAAMI,YAAYJ,QAAS,cAAT,CAAlB;;AACA,MAAMK,gBAAgBL,QAAS,0BAAT,CAAtB;;AACA,MAAMM,sBAAsBN,QAAS,gCAAT,CAA5B;;AAEA,SAASO,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCV,SAAOW,GAAP,CAAY,EAAZ;AACAX,SAAOY,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AASDG,OAAOC,OAAP;AAAA;AAAA;AAAA,iCAAiB,WAAqBC,OAArB,EAAyC;AAAA,uBACxBV,UAAUU,OAAV,CADwB;AAAA,UAChDC,aADgD,QAChDA,aADgD;;AAGxD,UAAMV,cAAe,YAAf,EAA4B;AAAEW,eAASD;AAAX,KAA5B,CAAN,CAHwD,CAKxD;AACA;;AACAT;AAEA,QAAIW,QAAJ;AACAA,eAAWlB,OAAOmB,aAAP,CAAsB,cAAtB,CAAX;AACAD,aAASE,KAAT;AACA,UAAMlB,SAASa,OAAT,EAAkBM,KAAlB,CAAwBX,OAAO;AACnCF,oBAAe,uBAAf,EAAuCE,GAAvC;AACD,KAFK,CAAN;AAGAQ,aAASI,GAAT;AAEAJ,eAAWlB,OAAOmB,aAAP,CAAsB,wCAAtB,CAAX;AACAD,aAASE,KAAT;AACA,UAAMhB,sBAAsBW,OAAtB,EAA+BM,KAA/B,CAAqCX,OAAO;AAChDF,oBAAe,sCAAf,EAAsDE,GAAtD;AACD,KAFK,CAAN;AAGAQ,aAASI,GAAT;AAEAJ,eAAWlB,OAAOmB,aAAP,CAAsB,gCAAtB,CAAX;AACAD,aAASE,KAAT;AACA,UAAMjB,UAAUY,OAAV,EAAmBM,KAAnB,CAAyBX,OAAO;AACpCF,oBACER,OAAOuB,WAAY;;;;OADrB,EAMEb,GANF;AAQD,KATK,CAAN;AAUAQ,aAASI,GAAT;AAEA,UAAMhB,cAAe,aAAf,EAA6B;AAAEW,eAASD;AAAX,KAA7B,CAAN;AAEAhB,WAAOwB,IAAP,CAAa,oBAAmBC,QAAQC,MAAR,EAAiB,MAAjD;AACD,GAzCD;;AAAA,kBAAgCC,KAAhC;AAAA;AAAA;AAAA","file":"build.js","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildCSS = require(`./build-css`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  browserslist: string[],\n  prefixPaths: boolean,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  const { graphqlRunner } = await bootstrap(program)\n\n  await apiRunnerNode(`onPreBuild`, { graphql: graphqlRunner })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity\n  activity = report.activityTimer(`Building CSS`)\n  activity.start()\n  await buildCSS(program).catch(err => {\n    reportFailure(`Generating CSS failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building production JavaScript bundles`)\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`)\n  activity.start()\n  await buildHTML(program).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, { graphql: graphqlRunner })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n}\n"]}