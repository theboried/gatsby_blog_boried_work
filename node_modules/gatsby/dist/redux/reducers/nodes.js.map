{"version":3,"sources":["../../../src/redux/reducers/nodes.js"],"names":["_","require","parentChildrenMap","Map","findChildrenRecursively","children","concat","map","child","newChildren","get","delete","module","exports","state","action","newState","type","descendantNodes","payload","id","omit","set","allNodes","flatten","n"],"mappings":"AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,MAAMC,oBAAoB,IAAIC,GAAJ,EAA1B;;AAEA,MAAMC,0BAA0B,CAACC,WAAW,EAAZ,KAAmB;AACjDA,aAAWA,SAASC,MAAT,CACT,GAAGD,SAASE,GAAT,CAAaC,SAAS;AACvB,UAAMC,cAAcP,kBAAkBQ,GAAlB,CAAsBF,KAAtB,CAApB;AACAN,sBAAkBS,MAAlB,CAAyBH,KAAzB;;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOL,wBAAwBK,WAAxB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF,GARE,CADM,CAAX;AAYA,SAAOJ,QAAP;AACD,CAdD;;AAgBAO,OAAOC,OAAP,GAAiB,CAACC,QAAQ,EAAT,EAAaC,MAAb,KAAwB;AACvC,MAAIC,QAAJ;;AACA,UAAQD,OAAOE,IAAf;AACE,SAAM,cAAN;AACE,aAAO,EAAP;;AACF,SAAM,aAAN;AAAoB;AAClB;AACA;AACA,cAAMC,kBAAkBd,wBACtBF,kBAAkBQ,GAAlB,CAAsBK,OAAOI,OAAP,CAAeC,EAArC,CADsB,CAAxB;AAGAlB,0BAAkBS,MAAlB,CAAyBI,OAAOI,OAAP,CAAeC,EAAxC;AACAJ,mBAAWhB,EAAEqB,IAAF,CAAOP,KAAP,EAAcI,eAAd,CAAX;AAEAF,qCACKA,QADL;AAEE,WAACD,OAAOI,OAAP,CAAeC,EAAhB,GAAqBL,OAAOI;AAF9B;AAIA,eAAOH,QAAP;AACD;;AAED,SAAM,mBAAN;AACA,SAAM,+BAAN;AACEd,wBAAkBoB,GAAlB,CAAsBP,OAAOI,OAAP,CAAeC,EAArC,EAAyCL,OAAOI,OAAP,CAAed,QAAxD;AACAW,mCACKF,KADL;AAEE,SAACC,OAAOI,OAAP,CAAeC,EAAhB,GAAqBL,OAAOI;AAF9B;AAIA,aAAOH,QAAP;;AAEF,SAAM,aAAN;AAAoB;AAClB;AACA,cAAMO,WAAW,CACfR,OAAOI,OADQ,EAEf,GAAGf,wBAAwBF,kBAAkBQ,GAAlB,CAAsBK,OAAOI,OAA7B,CAAxB,CAFY,CAAjB;AAIAjB,0BAAkBS,MAAlB,CAAyBI,OAAOI,OAAhC;AAEAH,mBAAWhB,EAAEqB,IAAF,CAAOP,KAAP,EAAcS,QAAd,CAAX;AACA,eAAOP,QAAP;AACD;;AAED,SAAM,cAAN;AAAqB;AACnB;AACA,cAAMO,WAAW,CACf,GAAGR,OAAOI,OADK,EAEf,GAAGnB,EAAEwB,OAAF,CACDT,OAAOI,OAAP,CAAeZ,GAAf,CAAmBkB,KAAK;AACtB,gBAAMP,kBAAkBd,wBACtBF,kBAAkBQ,GAAlB,CAAsBe,CAAtB,CADsB,CAAxB;AAGAvB,4BAAkBS,MAAlB,CAAyBc,CAAzB;AACA,iBAAOP,eAAP;AACD,SAND,CADC,CAFY,CAAjB;AAYAF,mBAAWhB,EAAEqB,IAAF,CAAOP,KAAP,EAAcS,QAAd,CAAX;AACA,eAAOP,QAAP;AACD;;AAED;AACE,aAAOF,KAAP;AA3DJ;AA6DD,CA/DD","file":"nodes.js","sourcesContent":["const _ = require(`lodash`)\n\nconst parentChildrenMap = new Map()\n\nconst findChildrenRecursively = (children = []) => {\n  children = children.concat(\n    ...children.map(child => {\n      const newChildren = parentChildrenMap.get(child)\n      parentChildrenMap.delete(child)\n      if (newChildren) {\n        return findChildrenRecursively(newChildren)\n      } else {\n        return []\n      }\n    })\n  )\n\n  return children\n}\n\nmodule.exports = (state = {}, action) => {\n  let newState\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return {}\n    case `CREATE_NODE`: {\n      // Remove any previously created descendant nodes as they're all due\n      // to be recreated.\n      const descendantNodes = findChildrenRecursively(\n        parentChildrenMap.get(action.payload.id)\n      )\n      parentChildrenMap.delete(action.payload.id)\n      newState = _.omit(state, descendantNodes)\n\n      newState = {\n        ...newState,\n        [action.payload.id]: action.payload,\n      }\n      return newState\n    }\n\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`:\n      parentChildrenMap.set(action.payload.id, action.payload.children)\n      newState = {\n        ...state,\n        [action.payload.id]: action.payload,\n      }\n      return newState\n\n    case `DELETE_NODE`: {\n      // Also delete any nodes transformed from this one.\n      const allNodes = [\n        action.payload,\n        ...findChildrenRecursively(parentChildrenMap.get(action.payload)),\n      ]\n      parentChildrenMap.delete(action.payload)\n\n      newState = _.omit(state, allNodes)\n      return newState\n    }\n\n    case `DELETE_NODES`: {\n      // Also delete any nodes transformed from these.\n      const allNodes = [\n        ...action.payload,\n        ..._.flatten(\n          action.payload.map(n => {\n            const descendantNodes = findChildrenRecursively(\n              parentChildrenMap.get(n)\n            )\n            parentChildrenMap.delete(n)\n            return descendantNodes\n          })\n        ),\n      ]\n      newState = _.omit(state, allNodes)\n      return newState\n    }\n\n    default:\n      return state\n  }\n}\n"]}