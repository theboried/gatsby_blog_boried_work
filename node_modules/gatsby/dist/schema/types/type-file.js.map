{"version":3,"sources":["../../../src/schema/types/type-file.js"],"names":["require","GraphQLList","_","mime","isRelative","isRelativeUrl","normalize","systemPath","getNodes","findRootNode","createPageDependency","joinPath","type","listType","setFileNodeRootType","fileNodeRootType","createType","pointsToFile","nodes","key","value","looksLikeFile","isString","getType","node","find","n","get","visit","current","selector","fn","i","keys","Object","length","undefined","concat","proceed","isNormalInteger","str","test","isMatch","v","k","parent","normalizedSelector","map","s","filter","fullSelector","join","rootNode","internal","pathToOtherNode","dir","otherFileExists","some","absolutePath","shouldInfer","isEmpty","isArray","resolve","args","path","fieldName","fieldValue","findLinkedFileNode","relativePath","fileLinkPath","parentFileNode","linkedFileNode","nodeId","id","getListType"],"mappings":"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","file":"type-file.js","sourcesContent":["const { GraphQLList } = require(`graphql`)\nconst _ = require(`lodash`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\n\nconst { getNodes } = require(`../../redux`)\nconst { findRootNode } = require(`../node-tracking`)\nconst {\n  createPageDependency,\n} = require(`../../redux/actions/add-page-dependency`)\nconst { joinPath } = require(`../../utils/path`)\n\nlet type, listType\n\nexport function setFileNodeRootType(fileNodeRootType) {\n  if (fileNodeRootType) {\n    type = createType(fileNodeRootType, false)\n    listType = createType(fileNodeRootType, true)\n  } else {\n    type = null\n    listType = null\n  }\n}\n\nfunction pointsToFile(nodes, key, value) {\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.getType(value) !== `application/octet-stream` &&\n    // domains ending with .com\n    mime.getType(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  // Find the node used for this example.\n  let node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    // Try another search as our \"key\" isn't always correct e.g.\n    // it doesn't support arrays so the right key could be \"a.b[0].c\" but\n    // this function will get \"a.b.c\".\n    //\n    // We loop through every value of nodes until we find\n    // a match.\n    const visit = (current, selector = [], fn) => {\n      for (let i = 0, keys = Object.keys(current); i < keys.length; i++) {\n        const key = keys[i]\n        const value = current[key]\n\n        if (value === undefined || value === null) continue\n\n        if (typeof value === `object` || typeof value === `function`) {\n          visit(current[key], selector.concat([key]), fn)\n          continue\n        }\n\n        let proceed = fn(current[key], key, selector, current)\n\n        if (proceed === false) {\n          break\n        }\n      }\n    }\n\n    const isNormalInteger = str => /^\\+?(0|[1-9]\\d*)$/.test(str)\n\n    node = nodes.find(n => {\n      let isMatch = false\n      visit(n, [], (v, k, selector, parent) => {\n        if (v === value) {\n          // Remove integers as they're for arrays, which our passed\n          // in object path doesn't have.\n          const normalizedSelector = selector\n            .map(s => (isNormalInteger(s) ? `` : s))\n            .filter(s => s !== ``)\n          const fullSelector = `${normalizedSelector.join(`.`)}.${k}`\n          if (fullSelector === key) {\n            isMatch = true\n            return false\n          }\n        }\n\n        // Not a match so we continue\n        return true\n      })\n\n      return isMatch\n    })\n\n    // Still no node.\n    if (!node) {\n      return false\n    }\n  }\n\n  const rootNode = findRootNode(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodes().some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\nexport function shouldInfer(nodes, selector, value) {\n  return (\n    nodes[0].internal.type !== `File` &&\n    ((_.isString(value) &&\n      !_.isEmpty(value) &&\n      pointsToFile(nodes, selector, value)) ||\n      (_.isArray(value) &&\n        _.isString(value[0]) &&\n        !_.isEmpty(value[0]) &&\n        pointsToFile(nodes, `${selector}[0]`, value[0])))\n  )\n}\n\nfunction createType(fileNodeRootType, isArray) {\n  if (!fileNodeRootType) return null\n\n  return {\n    type: isArray ? new GraphQLList(fileNodeRootType) : fileNodeRootType,\n    resolve: (node, args, { path }, { fieldName }) => {\n      let fieldValue = node[fieldName]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      const findLinkedFileNode = relativePath => {\n        // Use the parent File node to create the absolute path to\n        // the linked file.\n        const fileLinkPath = normalize(\n          systemPath.resolve(parentFileNode.dir, relativePath)\n        )\n\n        // Use that path to find the linked File node.\n        const linkedFileNode = _.find(\n          getNodes(),\n          n => n.internal.type === `File` && n.absolutePath === fileLinkPath\n        )\n        if (linkedFileNode) {\n          createPageDependency({\n            path,\n            nodeId: linkedFileNode.id,\n          })\n          return linkedFileNode\n        } else {\n          return null\n        }\n      }\n\n      // Find the File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNode(node)\n\n      // Find the linked File node(s)\n      if (isArray) {\n        return fieldValue.map(relativePath => findLinkedFileNode(relativePath))\n      } else {\n        return findLinkedFileNode(fieldValue)\n      }\n    },\n  }\n}\n\nexport function getType() {\n  return type\n}\n\nexport function getListType() {\n  return listType\n}\n"]}