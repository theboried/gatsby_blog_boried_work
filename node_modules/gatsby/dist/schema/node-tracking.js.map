{"version":3,"sources":["../../src/schema/node-tracking.js"],"names":["_","require","getNode","getNodes","rootNodeMap","WeakMap","getRootNodeId","node","get","addRootNodeToInlineObject","data","nodeId","isPlainObject","isArray","each","o","set","trackInlineObjectsInRootNode","v","k","id","exports","findRootNode","obj","rootNode","whileCount","rootNodeId","parent","undefined","console","log"],"mappings":"AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;iBAC8BA,QAAS,UAAT,C;MAAtBC,O,YAAAA,O;MAASC,Q,YAAAA,Q;AAEjB;;;;;;;AAKA,MAAMC,cAAc,IAAIC,OAAJ,EAApB;;AAEA,MAAMC,gBAAgBC,QAAQH,YAAYI,GAAZ,CAAgBD,IAAhB,CAA9B;AAEA;;;;;;;;;AAOA,MAAME,4BAA4B,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClD,MAAIX,EAAEY,aAAF,CAAgBF,IAAhB,KAAyBV,EAAEa,OAAF,CAAUH,IAAV,CAA7B,EAA8C;AAC5CV,MAAEc,IAAF,CAAOJ,IAAP,EAAaK,KAAKN,0BAA0BM,CAA1B,EAA6BJ,MAA7B,CAAlB;;AACAP,gBAAYY,GAAZ,CAAgBN,IAAhB,EAAsBC,MAAtB;AACD;AACF,CALD;AAOA;;;;;AAKA;;;AACA,MAAMM,+BAA+BV,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AAEAP,IAAEc,IAAF,CAAOP,IAAP,EAAa,CAACW,CAAD,EAAIC,CAAJ,KAAU;AACrB;AACA,QAAIA,MAAO,UAAX,EAAsB;AACpB;AACD;;AACDV,8BAA0BS,CAA1B,EAA6BX,KAAKa,EAAlC;AACD,GAND,EAT2C,CAiB3C;;;AACA,SAAOb,IAAP;AACD,CAnBD;;AAoBAc,QAAQJ,4BAAR,GAAuCA,4BAAvC;AAEA;;;;;;AAKA,SAASK,YAAT,CAAsBC,GAAtB,EAA2B;AACzB;AACA,MAAIC,WAAWD,GAAf;AACA,MAAIE,aAAa,CAAjB;AACA,MAAIC,UAAJ;;AACA,SACE,CAACA,aAAapB,cAAckB,QAAd,KAA2BA,SAASG,MAAlD,MACCzB,QAAQsB,SAASG,MAAjB,MAA6BC,SAA7B,IAA0C1B,QAAQwB,UAAR,CAD3C,KAEAD,aAAa,GAHf,EAIE;AACA,QAAIC,UAAJ,EAAgB;AACdF,iBAAWtB,QAAQwB,UAAR,CAAX;AACD,KAFD,MAEO;AACLF,iBAAWtB,QAAQsB,SAASG,MAAjB,CAAX;AACD;;AACDF,kBAAc,CAAd;;AACA,QAAIA,aAAa,GAAjB,EAAsB;AACpBI,cAAQC,GAAR,CACG,+DADH,EAEEN,QAFF;AAID;AACF;;AAED,SAAOA,QAAP;AACD;;AAEDH,QAAQC,YAAR,GAAuBA,YAAvB,C,CAEA;;AACAtB,EAAEc,IAAF,CAAOX,UAAP,EAAmBI,QAAQ;AACzBU,+BAA6BV,IAA7B;AACD,CAFD","file":"node-tracking.js","sourcesContent":["const _ = require(`lodash`)\nconst { getNode, getNodes } = require(`../redux`)\n\n/**\n * Map containing links between inline objects or arrays\n * and Node that contains them\n * @type {Object.<(Object|Array),string>}\n */\nconst rootNodeMap = new WeakMap()\n\nconst getRootNodeId = node => rootNodeMap.get(node)\n\n/**\n * Add link between passed data and Node. This function shouldn't be used\n * directly. Use higher level `trackInlineObjectsInRootNode`\n * @see trackInlineObjectsInRootNode\n * @param {(Object|Array)} data Inline object or array\n * @param {string} nodeId Id of node that contains data passed in first parameter\n */\nconst addRootNodeToInlineObject = (data, nodeId) => {\n  if (_.isPlainObject(data) || _.isArray(data)) {\n    _.each(data, o => addRootNodeToInlineObject(o, nodeId))\n    rootNodeMap.set(data, nodeId)\n  }\n}\n\n/**\n * Adds link between inline objects/arrays contained in Node object\n * and that Node object.\n * @param {Node} node Root Node\n */\n// const nodeDigestTracked = new Set()\nconst trackInlineObjectsInRootNode = node => {\n  // const id =\n  // node && node.internal && node.internal.contentDigest\n  // ? node.internal.contentDigest\n  // : node.id\n  // if (nodeDigestTracked.has(id)) {\n  // return node\n  // }\n\n  _.each(node, (v, k) => {\n    // Ignore the node internal object.\n    if (k === `internal`) {\n      return\n    }\n    addRootNodeToInlineObject(v, node.id)\n  })\n\n  // nodeDigestTracked.add(id)\n  return node\n}\nexports.trackInlineObjectsInRootNode = trackInlineObjectsInRootNode\n\n/**\n * Finds top most ancestor of node that contains passed Object or Array\n * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n * @returns {Node} Top most ancestor\n */\nfunction findRootNode(obj) {\n  // Find the root node.\n  let rootNode = obj\n  let whileCount = 0\n  let rootNodeId\n  while (\n    (rootNodeId = getRootNodeId(rootNode) || rootNode.parent) &&\n    (getNode(rootNode.parent) !== undefined || getNode(rootNodeId)) &&\n    whileCount < 101\n  ) {\n    if (rootNodeId) {\n      rootNode = getNode(rootNodeId)\n    } else {\n      rootNode = getNode(rootNode.parent)\n    }\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return rootNode\n}\n\nexports.findRootNode = findRootNode\n\n// Track nodes that are already in store\n_.each(getNodes(), node => {\n  trackInlineObjectsInRootNode(node)\n})\n"]}