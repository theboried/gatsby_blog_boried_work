var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");

const _ = require(`lodash`);

const _require = require(`graphql`),
      GraphQLSchema = _require.GraphQLSchema,
      GraphQLObjectType = _require.GraphQLObjectType;

const buildNodeTypes = require(`./build-node-types`);

const buildNodeConnections = require(`./build-node-connections`);

const _require2 = require(`../redux`),
      store = _require2.store;

const invariant = require(`invariant`);

module.exports =
/*#__PURE__*/
_asyncToGenerator(function* () {
  const typesGQL = yield buildNodeTypes();
  const connections = buildNodeConnections(_.values(typesGQL)); // Pull off just the graphql node from each type object.

  const nodes = _.mapValues(typesGQL, `node`);

  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`);
  invariant(!_.isEmpty(connections), `There are no available GQL connections`);
  const schema = new GraphQLSchema({
    query: new GraphQLObjectType({
      name: `RootQueryType`,
      fields: Object.assign({}, connections, nodes)
    })
  });
  store.dispatch({
    type: `SET_SCHEMA`,
    payload: schema
  });
});
//# sourceMappingURL=index.js.map