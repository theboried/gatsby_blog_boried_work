{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["require","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLUnionType","_","invariant","oneLine","store","getNode","getNodes","createPageDependency","createTypeName","createKey","extractFieldExamples","isEmptyObjectOrArray","DateType","FileType","inferGraphQLType","exampleValue","selector","nodes","types","otherArgs","fieldName","split","pop","shouldInfer","isArray","getListType","getType","Array","inferredType","type","args","resolve","listType","object","context","resolveInfo","fieldValue","map","value","name","fields","inferObjectStructureFromNodes","isInteger","inferFromMapping","mapping","fieldSelector","matchedTypes","filter","isEmpty","console","log","findNode","path","linkedType","linkedNode","find","n","internal","id","nodeId","nodeObjectType","node","a","b","findLinkedNode","linkedField","inferFromFieldName","uniqBy","v","key","validateLinkedNode","validateField","field","findNodeType","linkedNodes","forEach","i","length","f","sort","join","description","resolveType","data","result","EXCLUDE_KEYS","parent","children","config","getState","isRoot","inferredFields","each","nextSelector","inferredField","includes","Object","keys"],"mappings":"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","file":"infer-graphql-type.js","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store, getNode, getNodes } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\nconst DateType = require(`./types/type-date`)\nconst FileType = require(`./types/type-file`)\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  nodes,\n  types,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return null\n  let fieldName = selector.split(`.`).pop()\n\n  // Check this before checking for array as FileType has\n  // builtin support for inferring array of files and inferred\n  // array type will have faster resolver than resolving array\n  // of files separately.\n  if (FileType.shouldInfer(nodes, selector, exampleValue)) {\n    return _.isArray(exampleValue) ? FileType.getListType() : FileType.getType()\n  }\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return null\n\n    let inferredType = inferGraphQLType({\n      ...otherArgs,\n      exampleValue,\n      selector,\n      nodes,\n      types,\n    })\n    invariant(\n      inferredType,\n      `Could not infer graphQL type for value: ${exampleValue}`\n    )\n\n    const { type, args = null, resolve = null } = inferredType\n\n    const listType = { type: new GraphQLList(type), args }\n\n    if (resolve) {\n      // If inferredType has resolve function wrap it with Array.map\n      listType.resolve = (object, args, context, resolveInfo) => {\n        const fieldValue = object[fieldName]\n        if (!fieldValue) {\n          return null\n        }\n\n        // Field resolver expects first parameter to be plain object\n        // containing key with name of field we want to resolve.\n        return fieldValue.map(value =>\n          resolve({ [fieldName]: value }, args, context, resolveInfo)\n        )\n      }\n    }\n\n    return listType\n  }\n\n  if (DateType.shouldInfer(exampleValue)) {\n    return DateType.getType()\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: inferObjectStructureFromNodes({\n            ...otherArgs,\n            exampleValue,\n            selector,\n            nodes,\n            types,\n          }),\n        }),\n      }\n    case `number`:\n      return _.isInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const matchedTypes = types.filter(\n    type => type.name === mapping[fieldSelector]\n  )\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return null\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedType = mapping[fieldSelector]\n    const linkedNode = _.find(\n      getNodes(),\n      n => n.internal.type === linkedType && n.id === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n    return null\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nexport function findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) createPageDependency({ path, nodeId: linkedNode.id })\n    return linkedNode\n  }\n  return null\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    isArray = true\n    // Reduce values to nodes with unique types.\n    value = _.uniqBy(value, v => getNode(v).internal.type)\n  }\n\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const validateLinkedNode = linkedNode => {\n    invariant(\n      linkedNode,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding node with the ${linkedField || `id`}\n        field matching: \"${value}\"\n      `\n    )\n  }\n  const validateField = (linkedNode, field) => {\n    invariant(\n      field,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding GraphQL type \"${\n          linkedNode.internal.type\n        }\" available\n        to link to this node.\n      `\n    )\n  }\n\n  const findNodeType = node =>\n    types.find(type => type.name === node.internal.type)\n\n  if (isArray) {\n    const linkedNodes = value.map(v => findLinkedNode(v))\n    linkedNodes.forEach(node => validateLinkedNode(node))\n    const fields = linkedNodes.map(node => findNodeType(node))\n    fields.forEach((field, i) => validateField(linkedNodes[i], field))\n\n    let type\n    // If there's more than one type, we'll create a union type.\n    if (fields.length > 1) {\n      type = new GraphQLUnionType({\n        name: `Union_${key}_${fields\n          .map(f => f.name)\n          .sort()\n          .join(`__`)}`,\n        description: `Union interface for the field \"${key}\" for types [${fields\n          .map(f => f.name)\n          .sort()\n          .join(`, `)}]`,\n        types: fields.map(f => f.nodeObjectType),\n        resolveType: data =>\n          fields.find(f => f.name == data.internal.type).nodeObjectType,\n      })\n    } else {\n      type = fields[0].nodeObjectType\n    }\n\n    return {\n      type: new GraphQLList(type),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  validateLinkedNode(linkedNode)\n  const field = findNodeType(linkedNode)\n  validateField(linkedNode, field)\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  selector?: string,\n  exampleValue?: Object,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nexport function inferObjectStructureFromNodes({\n  nodes,\n  types,\n  selector,\n  exampleValue = extractFieldExamples(nodes),\n}: inferTypeOptions): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const inferredFields = {}\n  _.each(exampleValue, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${nodes[0].internal.type}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (_.includes(key, `___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n    }\n\n    // Finally our automatic inference of field value type.\n    if (!inferredField) {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: nextSelector,\n      })\n    }\n\n    if (!inferredField) return\n\n    // Replace unsupported values\n    inferredFields[createKey(fieldName)] = inferredField\n  })\n\n  return inferredFields\n}\n"]}