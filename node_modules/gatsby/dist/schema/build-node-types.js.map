{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","setFileNodeRootType","module","exports","types","groupBy","node","internal","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","a","context","path","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","filteredNodes","filter","n","nodeId","childNode","find","inferredFields","allNodes","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","runSift","latestNodes","isObject","Promise","all"],"mappings":"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","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path ? context.path : `LAYOUT___${context.id}`,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n\n    // Special case to construct linked file type used by type inferring\n    if (typeName === `File`) {\n      setFileNodeRootType(gqlType)\n    }\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}