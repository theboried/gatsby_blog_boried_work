{"version":3,"sources":["../../../src/internal-plugins/component-page-creator/gatsby-node.js"],"names":["globCB","require","Promise","_","chokidar","systemPath","glob","promisify","createPath","validatePath","exports","createPagesStatefully","store","actions","options","doneCb","createPage","deletePage","program","getState","exts","extensions","map","e","slice","join","pagesDirectory","posix","directory","pagesGlob","files","forEach","file","_createPage","watch","on","path","includes","push","pages","filter","p","component","page","f","filePath","relative"],"mappings":";;AAAA,MAAMA,SAASC,QAAS,MAAT,CAAf;;AACA,MAAMC,UAAUD,QAAS,UAAT,CAAhB;;AACA,MAAME,IAAIF,QAAS,QAAT,CAAV;;AACA,MAAMG,WAAWH,QAAS,UAAT,CAAjB;;AACA,MAAMI,aAAaJ,QAAS,MAAT,CAAnB;;AAEA,MAAMK,OAAOJ,QAAQK,SAAR,CAAkBP,MAAlB,CAAb;;AAEA,MAAMQ,aAAaP,QAAS,eAAT,CAAnB;;AACA,MAAMQ,eAAeR,QAAS,iBAAT,CAArB,C,CAEA;AACA;AACA;AACA;AACA;;;AACAS,QAAQC,qBAAR;AAAA;AAAA;AAAA,+BAAgC,WAAO;AAAEC,SAAF;AAASC;AAAT,GAAP,EAA2BC,OAA3B,EAAoCC,MAApC,EAA+C;AAAA,UACrEC,UADqE,GAC1CH,OAD0C,CACrEG,UADqE;AAAA,UACzDC,UADyD,GAC1CJ,OAD0C,CACzDI,UADyD;AAE7E,UAAMC,UAAUN,MAAMO,QAAN,GAAiBD,OAAjC;AACA,UAAME,OAAOF,QAAQG,UAAR,CAAmBC,GAAnB,CAAuBC,KAAM,GAAEA,EAAEC,KAAF,CAAQ,CAAR,CAAW,EAA1C,EAA6CC,IAA7C,CAAmD,GAAnD,CAAb;AACA,UAAMC,iBAAiBrB,WAAWsB,KAAX,CAAiBF,IAAjB,CAAsBP,QAAQU,SAA9B,EAA0C,YAA1C,CAAvB;AACA,UAAMC,YAAa,GAAEH,cAAe,UAASN,IAAK,GAAlD,CAL6E,CAO7E;;AACA,QAAIU,cAAcxB,KAAKuB,SAAL,CAAlB;AACAC,UAAMC,OAAN,CAAcC,QAAQC,YAAYD,IAAZ,EAAkBN,cAAlB,EAAkCV,UAAlC,CAAtB,EAT6E,CAW7E;;AACAZ,aACG8B,KADH,CACSL,SADT,EAEGM,EAFH,CAEO,KAFP,EAEaC,QAAQ;AACjB,UAAI,CAACjC,EAAEkC,QAAF,CAAWP,KAAX,EAAkBM,IAAlB,CAAL,EAA8B;AAC5BH,oBAAYG,IAAZ,EAAkBV,cAAlB,EAAkCV,UAAlC;;AACAc,cAAMQ,IAAN,CAAWF,IAAX;AACD;AACF,KAPH,EAQGD,EARH,CAQO,QARP,EAQgBC,QAAQ;AACpB;AACAxB,YACGO,QADH,GAEGoB,KAFH,CAESC,MAFT,CAEgBC,KAAKA,EAAEC,SAAF,KAAgBN,IAFrC,EAGGL,OAHH,CAGWY,QAAQ;AACf1B,mBAAW;AACTmB,gBAAM5B,WAAWkB,cAAX,EAA2BU,IAA3B,CADG;AAETM,qBAAWN;AAFF,SAAX;AAIAN,gBAAQA,MAAMU,MAAN,CAAaI,KAAKA,MAAMR,IAAxB,CAAR;AACD,OATH;AAUD,KApBH,EAqBGD,EArBH,CAqBO,OArBP,EAqBe,MAAMpB,QArBrB;AAsBD,GAlCD;;AAAA;AAAA;AAAA;AAAA;;AAmCA,MAAMkB,cAAc,CAACY,QAAD,EAAWnB,cAAX,EAA2BV,UAA3B,KAA0C;AAC5D;AACA;AACA,MAAI,CAACP,aAAaJ,WAAWsB,KAAX,CAAiBmB,QAAjB,CAA0BpB,cAA1B,EAA0CmB,QAA1C,CAAb,CAAL,EAAwE;AACtE;AACD,GAL2D,CAO5D;;;AACA,QAAMF,OAAO;AACXP,UAAM5B,WAAWkB,cAAX,EAA2BmB,QAA3B,CADK;AAEXH,eAAWG,QAFA,CAKb;;AALa,GAAb;AAMA7B,aAAW2B,IAAX;AACD,CAfD","file":"gatsby-node.js","sourcesContent":["const globCB = require(`glob`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst systemPath = require(`path`)\n\nconst glob = Promise.promisify(globCB)\n\nconst createPath = require(`./create-path`)\nconst validatePath = require(`./validate-path`)\n\n// Path creator.\n// Auto-create pages.\n// algorithm is glob /pages directory for js/jsx/cjsx files *not*\n// underscored. Then create url w/ our path algorithm *unless* user\n// takes control of that page component in gatsby-node.\nexports.createPagesStatefully = async ({ store, actions }, options, doneCb) => {\n  const { createPage, deletePage } = actions\n  const program = store.getState().program\n  const exts = program.extensions.map(e => `${e.slice(1)}`).join(`,`)\n  const pagesDirectory = systemPath.posix.join(program.directory, `/src/pages`)\n  const pagesGlob = `${pagesDirectory}/**/*.{${exts}}`\n\n  // Get initial list of files.\n  let files = await glob(pagesGlob)\n  files.forEach(file => _createPage(file, pagesDirectory, createPage))\n\n  // Listen for new component pages to be added or removed.\n  chokidar\n    .watch(pagesGlob)\n    .on(`add`, path => {\n      if (!_.includes(files, path)) {\n        _createPage(path, pagesDirectory, createPage)\n        files.push(path)\n      }\n    })\n    .on(`unlink`, path => {\n      // Delete the page for the now deleted component.\n      store\n        .getState()\n        .pages.filter(p => p.component === path)\n        .forEach(page => {\n          deletePage({\n            path: createPath(pagesDirectory, path),\n            component: path,\n          })\n          files = files.filter(f => f !== path)\n        })\n    })\n    .on(`ready`, () => doneCb())\n}\nconst _createPage = (filePath, pagesDirectory, createPage) => {\n  // Filter out special components that shouldn't be made into\n  // pages.\n  if (!validatePath(systemPath.posix.relative(pagesDirectory, filePath))) {\n    return\n  }\n\n  // Create page object\n  const page = {\n    path: createPath(pagesDirectory, filePath),\n    component: filePath,\n  }\n\n  // Add page\n  createPage(page)\n}\n"]}