{"version":3,"sources":["../../../src/internal-plugins/query-runner/file-parser.js"],"names":["fs","require","crypto","babylon","getGraphQLTag","report","apiRunnerNode","BABYLON_OPTIONS","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","sourceFilename","plugins","getMissingNameErrorMessage","file","stripIndent","parseToAst","filePath","fileStr","ast","transpiled","filename","contents","length","item","tmp","parse","error","undefined","findGraphQLTags","text","Promise","resolve","reject","then","queries","ExportNamedDeclaration","path","state","traverse","TaggedTemplateExpression","innerPath","gqlAst","definitions","forEach","def","name","value","panic","push","catch","cache","FileParser","parseFile","readFile","err","indexOf","hash","createHash","update","digest","astDefinitions","kind","parseFiles","files","documents","Map","all","map","doc","set"],"mappings":"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","file":"file-parser.js","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\n\n// Traverse is a es6 module...\nimport traverse from \"babel-traverse\"\nconst babylon = require(`babylon`)\nconst getGraphQLTag = require(`babel-plugin-remove-graphql-queries`)\n  .getGraphQLTag\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\n\nconst apiRunnerNode = require(`../../utils/api-runner-node`)\n\nconst BABYLON_OPTIONS = {\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  sourceType: `unambigious`,\n  sourceFilename: true,\n  plugins: [\n    `jsx`,\n    `flow`,\n    `doExpressions`,\n    `objectRestSpread`,\n    `decorators`,\n    `classProperties`,\n    `classPrivateProperties`,\n    `classPrivateMethods`,\n    `exportDefaultFrom`,\n    `exportNamespaceFrom`,\n    `asyncGenerators`,\n    `functionBind`,\n    `functionSent`,\n    `dynamicImport`,\n    `numericSeparator`,\n    `optionalChaining`,\n    `importMeta`,\n    `bigInt`,\n    `optionalCatchBinding`,\n    `throwExpressions`,\n    `pipelineOperator`,\n    `nullishCoalescingOperator`,\n  ],\n}\n\nconst getMissingNameErrorMessage = file => report.stripIndent`\n  GraphQL definitions must be \"named\".\n  The query with the missing name is in ${file}.\n  To fix the query, add \"query MyQueryName\" to the start of your query.\n  So instead of:\n    {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n\n  Do:\n    query MyQueryName {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n`\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n  })\n\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babylon.parse(item, BABYLON_OPTIONS)\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n    }\n  } else {\n    try {\n      ast = babylon.parse(fileStr, BABYLON_OPTIONS)\n    } catch (error) {\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `That Gatsby does not know how to parse.`\n      )\n    }\n  }\n\n  return ast\n}\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const gqlAst = getGraphQLTag(innerPath)\n                if (gqlAst) {\n                  gqlAst.definitions.forEach(def => {\n                    if (!def.name || !def.name.value) {\n                      report.panic(getMissingNameErrorMessage(file))\n                    }\n                  })\n\n                  queries.push(...gqlAst.definitions)\n                }\n              },\n            })\n          },\n        })\n        resolve(queries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      report.error(`There was a problem reading the file: ${file}`, err)\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"]}