{"version":3,"sources":["../../../src/internal-plugins/query-runner/graphql-errors.js"],"names":["handlers","name","node","kind","value","loc","formatFilePath","filePath","format","bold","blue","formatError","message","codeFrame","stripIndent","extractError","error","docRegex","matches","docName","exec","toString","index","lastIndex","findLocation","extractedMessage","def","location","enter","regex","handler","match","slice","getCodeFrame","query","lineNumber","column","linesAbove","linesBelow","getCodeFrameFromRelayError","start","source","body","line","multipleRootQueriesError","otherDef","otherName","unifiedName","camelCase","upperFirst","yellow","green","graphqlValidationError","errors","doc","length","locations","graphqlError","namePathMap","nameDefMap","get","reportedMessage"],"mappings":"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","file":"graphql-errors.js","sourcesContent":["// @flow\n\nimport { print, visit, GraphQLError, getLocation } from \"graphql\"\nimport babelCodeFrame from \"babel-code-frame\"\nimport _ from \"lodash\"\nimport report from \"gatsby-cli/lib/reporter\"\n\ntype RelayGraphQLError = Error & { validationErrors?: Object }\n\n// These handle specific errors throw by RelayParser. If an error matches\n// you get a pointer to the location in the query that is broken, otherwise\n// we show the error and the query.\nconst handlers = [\n  [\n    /Unknown field `(.+)` on type `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Field` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown argument `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Argument` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown directive `@(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Directive` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n]\n\nfunction formatFilePath(filePath: string) {\n  return `${report.format.bold(`file:`)} ${report.format.blue(filePath)}`\n}\n\nfunction formatError(message: string, filePath: string, codeFrame: string) {\n  return (\n    report.stripIndent`\n    ${message}\n\n      ${formatFilePath(filePath)}\n  ` + `\\n\\n${codeFrame}\\n`\n  )\n}\n\nfunction extractError(error: Error): { message: string, docName: string } {\n  const docRegex = /Invariant Violation: RelayParser: (.*). Source: document `(.*)` file:/g\n  let matches\n  let message = ``,\n    docName = ``\n  while ((matches = docRegex.exec(error.toString())) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (matches.index === docRegex.lastIndex) docRegex.lastIndex++\n    ;[, message, docName] = matches\n  }\n\n  if (!message) {\n    message = error.toString()\n  }\n\n  return { message, docName }\n}\n\nfunction findLocation(extractedMessage, def) {\n  let location = null\n  visit(def, {\n    enter(node) {\n      if (location) return\n      for (let [regex, handler] of handlers) {\n        let match = extractedMessage.match(regex)\n        if (!match) continue\n        if ((location = handler(match.slice(1), node))) break\n      }\n    },\n  })\n  return location\n}\n\nfunction getCodeFrame(query: string, lineNumber?: number, column?: number) {\n  return babelCodeFrame(query, lineNumber, column, {\n    linesAbove: 10,\n    linesBelow: 10,\n  })\n}\n\nfunction getCodeFrameFromRelayError(\n  def: any,\n  extractedMessage: string,\n  error: Error\n) {\n  let { start, source } = findLocation(extractedMessage, def) || {}\n  let query = source ? source.body : print(def)\n\n  // we can't reliably get a location without the location source, since\n  // the printed query may differ from the original.\n  let { line, column } = (source && getLocation(source, start)) || {}\n  return getCodeFrame(query, line, column)\n}\n\nexport function multipleRootQueriesError(\n  filePath: string,\n  def: any,\n  otherDef: any\n) {\n  let name = def.name.value\n  let otherName = otherDef.name.value\n  let unifiedName = `${_.camelCase(name)}And${_.upperFirst(\n    _.camelCase(otherName)\n  )}`\n\n  return formatError(\n    `Multiple \"root\" queries found in file: \"${name}\" and \"${otherName}\". ` +\n      `Only the first (\"${otherName}\") will be registered.`,\n    filePath,\n    `  ${report.format.yellow(`Instead of:`)} \\n\\n` +\n      babelCodeFrame(report.stripIndent`\n      query ${otherName} {\n        bar {\n          #...\n        }\n      }\n\n      query ${name} {\n        foo {\n          #...\n        }\n      }\n    `) +\n      `\\n\\n  ${report.format.green(`Do:`)} \\n\\n` +\n      babelCodeFrame(report.stripIndent`\n      query ${unifiedName} {\n        bar {\n          #...\n        }\n        foo {\n          #...\n        }\n      }\n    `)\n  )\n}\n\nexport function graphqlValidationError(\n  errors: Array<GraphQLError>,\n  filePath: string,\n  doc: any\n): string {\n  if (!errors || !errors.length) return ``\n  let error = errors[0]\n  let { source, locations: [{ line, column }] = [{}] } = error\n  let query = source ? source.body : print(doc)\n\n  return formatError(error.message, filePath, getCodeFrame(query, line, column))\n}\n\nexport function graphqlError(\n  namePathMap: Map<string, string>,\n  nameDefMap: Map<string, any>,\n  error: Error | RelayGraphQLError\n) {\n  let { message, docName } = extractError(error)\n  let filePath = namePathMap.get(docName)\n\n  if (filePath && docName) {\n    return formatError(\n      message,\n      filePath,\n      getCodeFrameFromRelayError(nameDefMap.get(docName), message, error)\n    )\n  }\n\n  let reportedMessage = `There was an error while compiling your site's GraphQL queries.\n  ${message || error.message}\n    `\n\n  if (error.message.match(/must be an instance of/)) {\n    reportedMessage +=\n      `This usually means that more than one instance of 'graphql' is installed ` +\n      `in your node_modules. Remove all but the top level one or run \\`npm dedupe\\` to fix it.`\n  }\n\n  if (error.message.match(/Duplicate document/)) {\n    reportedMessage += `${error.message.slice(21)}\\n`\n  }\n\n  return reportedMessage\n}\n"]}