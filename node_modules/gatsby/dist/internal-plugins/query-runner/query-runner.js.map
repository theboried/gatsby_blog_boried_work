{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","report","md5","joinPath","store","resultHashes","module","exports","pageOrLayout","component","id","_id","getState","schema","program","graphql","query","context","result","errors","log","stripIndent","componentPath","_name","process","exit","path","resultJSON","JSON","stringify","resultHash","resultPath","directory","jsonName","writeFile"],"mappings":";;;;;;AAAA;;AACA,MAAMA,KAAKC,QAAS,UAAT,CAAX;;AACA,MAAMC,SAASD,QAAS,yBAAT,CAAf;;AACA,MAAME,MAAMF,QAAS,KAAT,CAAZ;;iBAEqBA,QAAS,kBAAT,C;MAAbG,Q,YAAAA,Q;;kBACUH,QAAS,aAAT,C;MAAVI,K,aAAAA,K;;AAER,MAAMC,eAAe,EAArB,C,CAEA;;AACAC,OAAOC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAOC,YAAP,EAAqBC,SAArB,EAAmC;AAClDD,iBAAaE,EAAb,GAAkBF,aAAaG,GAA/B;;AADkD,4BAEtBP,MAAMQ,QAAN,EAFsB;AAAA,UAE1CC,MAF0C,mBAE1CA,MAF0C;AAAA,UAElCC,OAFkC,mBAElCA,OAFkC;;AAIlD,UAAMC,UAAU,CAACC,KAAD,EAAQC,OAAR,KACd,sBAAgBJ,MAAhB,EAAwBG,KAAxB,EAA+BC,OAA/B,EAAwCA,OAAxC,EAAiDA,OAAjD,CADF,CAJkD,CAOlD;;;AACA,QAAIC,MAAJ,CARkD,CAUlD;;AACA,QAAI,CAACT,UAAUO,KAAX,IAAoBP,UAAUO,KAAV,KAAqB,EAA7C,EAAgD;AAC9CE,eAAS,EAAT;AACD,KAFD,MAEO;AACLA,qBAAeH,QAAQN,UAAUO,KAAlB,oBACVR,YADU,EAEVA,aAAaS,OAFH,EAAf;AAID,KAlBiD,CAmBlD;AAEA;AACA;;;AACA,QAAIC,UAAUA,OAAOC,MAArB,EAA6B;AAC3BlB,aAAOmB,GAAP,CACEnB,OAAOoB,WAAY;iCACQZ,UAAUa,aAAc;;;YAG7CJ,OAAOC,MAAP,IAAiB,EAAG;;YAEpBV,UAAUO,KAAM;OAPxB,EAD2B,CAY3B;;AACA,UAAIF,QAAQS,KAAR,KAAmB,OAAvB,EAA+B;AAC7BC,gBAAQC,IAAR,CAAa,CAAb;AACD;AACF,KAvCiD,CAyClD;;;AACA,QAAI,CAACjB,aAAakB,IAAlB,EAAwB;AACtBR,aAAQ,eAAR,IAA0BV,aAAaS,OAAvC;AACD,KAFD,MAEO;AACLC,aAAQ,aAAR,IAAwBV,aAAaS,OAArC;AACD;;AACD,UAAMU,aAAaC,KAAKC,SAAL,CAAeX,MAAf,CAAnB;AACA,UAAMY,aAAa5B,IAAIyB,UAAJ,CAAnB;AACA,UAAMI,aAAa5B,SACjBW,QAAQkB,SADS,EAEhB,QAFgB,EAGhB,MAHgB,EAIjBxB,aAAayB,QAJI,CAAnB;;AAOA,QAAI5B,aAAa0B,UAAb,MAA6BD,UAAjC,EAA6C;AAC3CzB,mBAAa0B,UAAb,IAA2BD,UAA3B;AACA,YAAM/B,GAAGmC,SAAH,CAAaH,UAAb,EAAyBJ,UAAzB,CAAN;AACD;AACF,GA5DD;;AAAA;AAAA;AAAA;AAAA","file":"query-runner.js","sourcesContent":["import { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst md5 = require(`md5`)\n\nconst { joinPath } = require(`../../utils/path`)\nconst { store } = require(`../../redux`)\n\nconst resultHashes = {}\n\n// Run query for a page\nmodule.exports = async (pageOrLayout, component) => {\n  pageOrLayout.id = pageOrLayout._id\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!component.query || component.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(component.query, {\n      ...pageOrLayout,\n      ...pageOrLayout.context,\n    })\n  }\n  // console.log(`running query`, component.pathname, component.query, result)\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    report.log(\n      report.stripIndent`\n        The GraphQL query from ${component.componentPath} failed\n\n        Errors:\n          ${result.errors || []}\n        Query:\n          ${component.query}\n      `\n    )\n\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._name === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the path/layout context onto the results.\n  if (!pageOrLayout.path) {\n    result[`layoutContext`] = pageOrLayout.context\n  } else {\n    result[`pageContext`] = pageOrLayout.context\n  }\n  const resultJSON = JSON.stringify(result)\n  const resultHash = md5(resultJSON)\n  const resultPath = joinPath(\n    program.directory,\n    `.cache`,\n    `json`,\n    pageOrLayout.jsonName\n  )\n\n  if (resultHashes[resultPath] !== resultHash) {\n    resultHashes[resultPath] = resultHash\n    await fs.writeFile(resultPath, resultJSON)\n  }\n}\n"]}