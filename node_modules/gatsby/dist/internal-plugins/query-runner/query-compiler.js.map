{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-compiler.js"],"names":["normalize","require","_","printTransforms","ArgumentsOfCorrectTypeRule","DefaultValuesOfCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","Runner","constructor","baseDir","fragmentsDir","schema","reportError","message","process","env","NODE_ENV","panic","format","red","log","compileAll","nodes","parseEverything","write","files","sync","nodir","concat","filter","d","match","map","Object","keys","getState","components","c","uniq","parser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","documents","entries","filePath","doc","errors","length","push","definitions","forEach","def","name","value","set","compilerContext","addAll","convertASTDocuments","transform","bind","error","printContext","reduce","ctx","node","kind","get","has","otherNode","text","getRoot","print","join","path","compile","program","runner","directory","queries"],"mappings":"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","file":"query-compiler.js","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"relay-compiler\"\nimport RelayParser from \"relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../../redux\"\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ArgumentsOfCorrectTypeRule,\n  DefaultValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ArgumentsOfCorrectTypeRule,\n  DefaultValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nclass Runner {\n  baseDir: string\n  schema: GraphQLSchema\n  fragmentsDir: string\n\n  constructor(baseDir: string, fragmentsDir: string, schema: GraphQLSchema) {\n    this.baseDir = baseDir\n    this.fragmentsDir = fragmentsDir\n    this.schema = schema\n  }\n\n  reportError(message) {\n    if (process.env.NODE_ENV === `production`) {\n      report.panic(`${report.format.red(`GraphQL Error`)} ${message}`)\n    } else {\n      report.log(`${report.format.red(`GraphQL Error`)} ${message}`)\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    // FIXME: this should all use gatsby's configuration to determine parsable\n    // files (and how to parse them)\n    let files = glob.sync(`${this.fragmentsDir}/**/*.+(t|j)s?(x)`, {\n      nodir: true,\n    })\n    files = files.concat(\n      glob.sync(`${this.baseDir}/**/*.+(t|j)s?(x)`, { nodir: true })\n    )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Object.keys(store.getState().components).map(c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        this.reportError(graphqlValidationError(errors, filePath))\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      this.reportError(graphqlError(namePathMap, nameDefMap, error))\n      return compiledNodes\n    }\n\n    const printContext = printTransforms.reduce(\n      (ctx, transform) => transform(ctx, this.schema),\n      compilerContext\n    )\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        return\n      }\n\n      let text = filterContextForNode(printContext.getRoot(name), printContext)\n        .documents()\n        .map(GraphQLIRPrinter.print)\n        .join(`\\n`)\n\n      compiledNodes.set(filePath, {\n        name,\n        text,\n        path: path.join(this.baseDir, filePath),\n      })\n    })\n\n    return compiledNodes\n  }\n}\nexport { Runner }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  const { program, schema } = store.getState()\n\n  const runner = new Runner(\n    `${program.directory}/src`,\n    `${program.directory}/.cache/fragments`,\n    schema\n  )\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"]}