"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _graphql = require("graphql");

const fs = require(`fs-extra`);

const report = require(`gatsby-cli/lib/reporter`);

const md5 = require(`md5`);

const _require = require(`../../utils/path`),
      joinPath = _require.joinPath;

const _require2 = require(`../../redux`),
      store = _require2.store;

const resultHashes = {}; // Run query for a page

module.exports =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (pageOrLayout, component) {
    pageOrLayout.id = pageOrLayout._id;

    const _store$getState = store.getState(),
          schema = _store$getState.schema,
          program = _store$getState.program;

    const graphql = (query, context) => (0, _graphql.graphql)(schema, query, context, context, context); // Run query


    let result; // Nothing to do if the query doesn't exist.

    if (!component.query || component.query === ``) {
      result = {};
    } else {
      result = yield graphql(component.query, Object.assign({}, pageOrLayout, pageOrLayout.context));
    } // console.log(`running query`, component.pathname, component.query, result)
    // If there's a graphql error then log the error. If we're building, also
    // quit.


    if (result && result.errors) {
      report.log(report.stripIndent`
        The GraphQL query from ${component.componentPath} failed

        Errors:
          ${result.errors || []}
        Query:
          ${component.query}
      `); // Perhaps this isn't the best way to see if we're building?

      if (program._name === `build`) {
        process.exit(1);
      }
    } // Add the path/layout context onto the results.


    if (!pageOrLayout.path) {
      result[`layoutContext`] = pageOrLayout.context;
    } else {
      result[`pageContext`] = pageOrLayout.context;
    }

    const resultJSON = JSON.stringify(result);
    const resultHash = md5(resultJSON);
    const resultPath = joinPath(program.directory, `.cache`, `json`, pageOrLayout.jsonName);

    if (resultHashes[resultPath] !== resultHash) {
      resultHashes[resultPath] = resultHash;
      yield fs.writeFile(resultPath, resultJSON);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=query-runner.js.map