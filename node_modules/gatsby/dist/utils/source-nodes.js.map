{"version":3,"sources":["../../src/utils/source-nodes.js"],"names":["_","require","report","apiRunner","store","getNode","boundActionCreators","deleteNodes","discoverPluginsWithoutNodes","storeState","nodeCreationPlugins","without","union","apiToPlugins","sourceNodes","nodeOwners","uniq","values","nodes","reduce","acc","node","push","internal","owner","difference","module","exports","traceId","waitForCascadingActions","state","getState","pluginsWithNoNodes","map","name","warn","touchedNodes","Object","keys","nodesTouched","staleNodes","filter","rootNode","whileCount","parent","undefined","console","log","includes","id","length","n"],"mappings":";;AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AACA,MAAMC,SAASD,QAAS,yBAAT,CAAf;;AAEA,MAAME,YAAYF,QAAS,mBAAT,CAAlB;;iBAC2BA,QAAS,UAAT,C;MAAnBG,K,YAAAA,K;MAAOC,O,YAAAA,O;;kBACiBJ,QAAS,kBAAT,C;MAAxBK,mB,aAAAA,mB;;MACAC,W,GAAgBD,mB,CAAhBC,W;AAER;;;;;AAIA,SAASC,2BAAT,CAAqCC,UAArC,EAAiD;AAC/C;AACA,QAAMC,sBAAsBV,EAAEW,OAAF,CAC1BX,EAAEY,KAAF,CAAQH,WAAWI,YAAX,CAAwBC,WAAhC,CAD0B,EAEzB,qBAFyB,CAA5B,CAF+C,CAM/C;;;AACA,QAAMC,aAAaf,EAAEgB,IAAF,CACjBhB,EAAEiB,MAAF,CAASR,WAAWS,KAApB,EAA2BC,MAA3B,CAAkC,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/CD,QAAIE,IAAJ,CAASD,KAAKE,QAAL,CAAcC,KAAvB;AACA,WAAOJ,GAAP;AACD,GAHD,EAGG,EAHH,CADiB,CAAnB;;AAMA,SAAOpB,EAAEyB,UAAF,CAAaf,mBAAb,EAAkCK,UAAlC,CAAP;AACD;;AAEDW,OAAOC,OAAP;AAAA;AAAA,kBAAiB,aAAY;AAC3B,QAAMxB,UAAW,aAAX,EAAyB;AAC7ByB,aAAU,qBADmB;AAE7BC,6BAAyB;AAFI,GAAzB,CAAN;AAKA,QAAMC,QAAQ1B,MAAM2B,QAAN,EAAd,CAN2B,CAQ3B;;AACA,QAAMC,qBAAqBxB,4BAA4BsB,KAA5B,CAA3B;AACAE,qBAAmBC,GAAnB,CAAuBC,QACrBhC,OAAOiC,IAAP,CACG,OAAMD,IAAK,wDADd,CADF,EAV2B,CAgB3B;;AACA,QAAME,eAAeC,OAAOC,IAAP,CAAYR,MAAMS,YAAlB,CAArB;;AACA,QAAMC,aAAaxC,EAAEiB,MAAF,CAASa,MAAMZ,KAAf,EAAsBuB,MAAtB,CAA6BpB,QAAQ;AACtD;AACA,QAAIqB,WAAWrB,IAAf;AACA,QAAIsB,aAAa,CAAjB;;AACA,WACED,SAASE,MAAT,IACAvC,QAAQqC,SAASE,MAAjB,MAA6BC,SAD7B,IAEAF,aAAa,GAHf,EAIE;AACAD,iBAAWrC,QAAQqC,SAASE,MAAjB,CAAX;AACAD,oBAAc,CAAd;;AACA,UAAIA,aAAa,GAAjB,EAAsB;AACpBG,gBAAQC,GAAR,CACG,+DADH,EAEEL,QAFF;AAID;AACF;;AAED,WAAO,CAAC1C,EAAEgD,QAAF,CAAWZ,YAAX,EAAyBM,SAASO,EAAlC,CAAR;AACD,GApBkB,CAAnB;;AAsBA,MAAIT,WAAWU,MAAX,GAAoB,CAAxB,EAA2B;AACzB3C,gBAAYiC,WAAWP,GAAX,CAAekB,KAAKA,EAAEF,EAAtB,CAAZ;AACD;AACF,CA3CD","file":"source-nodes.js","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst apiRunner = require(`./api-runner-node`)\nconst { store, getNode } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deleteNodes } = boundActionCreators\n\n/**\n * Finds the name of all plugins which implement Gatsby APIs that\n * may create nodes, but which have not actually created any nodes.\n */\nfunction discoverPluginsWithoutNodes(storeState) {\n  // Discover which plugins implement APIs which may create nodes\n  const nodeCreationPlugins = _.without(\n    _.union(storeState.apiToPlugins.sourceNodes),\n    `default-site-plugin`\n  )\n  // Find out which plugins own already created nodes\n  const nodeOwners = _.uniq(\n    _.values(storeState.nodes).reduce((acc, node) => {\n      acc.push(node.internal.owner)\n      return acc\n    }, [])\n  )\n  return _.difference(nodeCreationPlugins, nodeOwners)\n}\n\nmodule.exports = async () => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n  })\n\n  const state = store.getState()\n\n  // Warn about plugins that should have created nodes but didn't.\n  const pluginsWithNoNodes = discoverPluginsWithoutNodes(state)\n  pluginsWithNoNodes.map(name =>\n    report.warn(\n      `The ${name} plugin has generated no Gatsby nodes. Do you need it?`\n    )\n  )\n\n  // Garbage collect stale data nodes\n  const touchedNodes = Object.keys(state.nodesTouched)\n  const staleNodes = _.values(state.nodes).filter(node => {\n    // Find the root node.\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !_.includes(touchedNodes, rootNode.id)\n  })\n\n  if (staleNodes.length > 0) {\n    deleteNodes(staleNodes.map(n => n.id))\n  }\n}\n"]}